version: "3.8"

services:
  fe-mailer:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: fe-mailer
    ports:
      - "3001:3001"
    restart: unless-stopped
    env_file:
      # Load environment variables for runtime
      - ./frontend/.env
    volumes:
      # Sync code for hot reloading
      - ./frontend:/app
      - /app/node_modules
    environment:
      # Enable polling for file watching in Docker
      - CHOKIDAR_USEPOLLING=true
    develop:
      watch:
        # Sync code changes for hot reloading
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
            - .env.*
    networks:
      - my_network
  mailer:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: mailer
    restart: always
    ports:
      - "4001:4001"
    env_file:
      # Load environment variables for runtime
      - ./backend/.env
    volumes:
      # Sync code for hot reloading
      - ./backend:/app
      - /app/node_modules
    environment:
      # Enable polling for file watching in Docker
      - CHOKIDAR_USEPOLLING=true
    command: npm run start:dev
    develop:
      watch:
        # Sync code changes for hot reloading
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - node_modules/
            - .env.*
    networks:
      - my_network
  kong-db:
    image: postgres:latest
    container_name: kong-db
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my_network
  kong-migrations:
    image: kong:3.6
    container_name: kong-migrations
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    networks:
      - my_network
  kong:
    image: kong:3.6
    container_name: kong
    depends_on:
      - kong-migrations
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"   # Proxy
      - "8001:8001"   # Admin API
    networks:
      - my_network
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    networks:
      - my_network
    ports:
      - "1337:1337"
    environment:
      - NODE_ENV=development
    depends_on:
      - kong

volumes:
  kong-db-data:

networks:
  my_network:
    driver: bridge